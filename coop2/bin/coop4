#!/usr/bin/env python3

#import datetime
from datetime import datetime, timedelta, date
import time
import astral
import pytz
import schedule
#from luma.core.interface.serial import i2c
#from luma.core.render import canvas
#from luma.oled.device import st7735


loctz = pytz.timezone('US/Central')

# city, country, latitude, longitude, time zone, elevation
coordinates = ["Poplar Bluff", "USA", 36.763084, -90.413871, 'US/Central', 110]
pbmo = astral.Location(info=(coordinates))
pbmo.solar_depression = "civil"

dateFormat = '%b %d %Y'
timeFormat = '%I:%M %p'
hoursFormat = '%Hh %Mm %Ss'
lastDate = datetime.date(datetime.now(loctz) - timedelta(days=1))

events = pbmo.sun(datetime.now(loctz))
dawn = events['dawn']
doorOpenTime = dawn
sunrise = events['sunrise']
sunset = events['sunset']
dusk = events['dusk']

lightStartDate = loctz.localize(datetime(2018, 9, 23))
lightAfterSunrise = timedelta(minutes = 60)

def update():
	global events
	global doorOpenTime
	global dawn
	global sunrise
	global sunset
	global dusk
	events = pbmo.sun(datetime.now(loctz))
	dawn = events['dawn']
	sunrise = events['sunrise']
	sunset = events['sunset']
	dusk = events['dusk']
	now = datetime.now(loctz)
	openDoor = now > doorOpenTime and now < dusk
	lightOn = now > doorOpenTime and now < sunrise + lightAfterSunrise

	print('Extra light starts {}'.format(lightStartDate.strftime(dateFormat)))
	if lightStartDate < now:
		days = (now - lightStartDate).days
		extra_time = days * 5
		total_time = 700 + extra_time
		doorOpenTime = sunset - timedelta(minutes = total_time)

	naturalLight = (datetime.min + (sunset - sunrise)).time().strftime(hoursFormat)
	totalLight = (datetime.min + (sunset - doorOpenTime)).time().strftime(hoursFormat)

	print('Today Date {}'.format(now.strftime(dateFormat)))
	print('Door Opens at {}'.format(doorOpenTime.strftime(timeFormat)))
	print('Dawn {}'.format(dawn.strftime(timeFormat)))
	print('Sunrise {}'.format(sunrise.strftime(timeFormat)))
	print('Now {}'.format(now.strftime(timeFormat)))
	print('Sunset {}'.format(sunset.strftime(timeFormat)))
	print('Dusk {}'.format(dusk.strftime(timeFormat)))
	print('Natural Light {}'.format(naturalLight))
	print('Total Light {}'.format(totalLight))
	#print('Update Door Open {} Light On {}'.format(openDoor, lightOn))

def status():
	global doorOpenTime
	global dusk
	global lightAfterSunrise
	now = datetime.now(loctz)
	openDoor = now > doorOpenTime and now < dusk
	lightOn = now > doorOpenTime and now < sunrise + lightAfterSunrise
	nowTime = now.strftime(timeFormat)
	#print('now {}\ndawn {}\ndusk {}'.format(now, dawn, dusk))
	print('Time {} Door Open {} Light On {}'.format(nowTime, openDoor, lightOn))

schedule.every(5).minutes.do(status)

try:
	while True:
		schedule.run_pending()
		today = datetime.date(datetime.now(pytz.timezone('US/Central')))
		if lastDate != today:
			lastDate = today
			update()
		time.sleep(.1)

except KeyboardInterrupt:
	# here you put any code you want to run before the program
	# exits when you press CTRL+C
	print('\nKeyBoard Interrupt')

except Exception as e:
	# this covers all other exceptions
	print(str(e))

